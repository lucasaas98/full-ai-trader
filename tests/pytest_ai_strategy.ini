# Pytest configuration for AI Strategy tests

[pytest]
# Test discovery patterns
python_files = test_ai_*.py
python_classes = Test*
python_functions = test_*

# Test directories
testpaths = tests

# Markers for different test types
markers =
    unit: Unit tests for individual components
    integration: Integration tests for system components
    performance: Performance and benchmark tests
    benchmark: Benchmark tests (slow)
    slow: Tests that take more than 1 second
    asyncio: Asynchronous tests
    api: Tests that require API access
    database: Tests that require database access
    redis: Tests that require Redis access
    mock: Tests using mocked dependencies

# Coverage settings
addopts =
    --verbose
    --tb=short
    --strict-markers
    --cov=services/strategy_engine/src
    --cov-report=term-missing
    --cov-report=html:coverage_html
    --cov-report=xml
    --cov-branch
    --cov-fail-under=70
    --maxfail=5
    --disable-warnings
    -p no:warnings

# Async settings
asyncio_mode = auto

# Timeout settings
timeout = 30
timeout_method = thread

# Output settings
console_output_style = progress
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Capture settings
capture = no

# Benchmark settings
benchmark_only = false
benchmark_skip = false
benchmark_disable = false
benchmark_max_time = 1.0
benchmark_min_time = 0.0005
benchmark_min_rounds = 5
benchmark_timer = time.perf_counter
benchmark_calibration_precision = 10
benchmark_warmup = true
benchmark_warmup_iterations = 1

# Parallel execution (if using pytest-xdist)
# -n auto  # Use all available CPUs
# -n 4     # Use 4 parallel workers

# Environment variables for tests
env =
    ANTHROPIC_API_KEY = test_key_for_testing
    DATABASE_URL = postgresql://test:test@localhost/test_trading
    REDIS_URL = redis://localhost:6379/1
    TESTING = true
    LOG_LEVEL = DEBUG

# Ignore certain files/directories
norecursedirs =
    .git
    .tox
    dist
    build
    *.egg
    venv
    __pycache__
    .pytest_cache
    coverage_html

# Doctest settings
doctest_optionflags = NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL

# Filtering and deselection
deselect =
    tests/test_ai_strategy_performance.py::TestPerformanceMetrics::test_benchmark*

# Custom test collection
collect_ignore = ["setup.py", "conftest.py"]
collect_ignore_glob = ["*_backup.py", "*.bak"]
